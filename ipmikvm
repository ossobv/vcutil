#!/bin/sh
# ipmikvm (part of ossobv/vcutil) // wdoekes/2019-2020 // Public Domain
#
# A wrapper to call the SuperMicro iKVM console bypassing Java browser
# plugins.
#
# Requirements: java, unzip, curl (and: awk, base64, grep, sed)
#
# Usage:
#
#   $ ipmikvm
#   Usage: ipmikvm [-u ADMIN] [-P ADMIN] IP.ADD.RE.SS
#
#   $ ipmikvm 10.11.12.13 -P otherpassword
#   (connects KVM console on IPMI device at 10.11.12.13)
#
# Config file ~/.config/ipmikvm/dict:
#
#   * * ADMIN ADMIN
#   * * ADMIN OTHERPASS
#   alias 1.2.3.4 ADMIN ADMIN
#
# This has been tested with:
# - iKVM__V1.69.19.0x0
# - iKVM__V1.69.22.0x0
# - iKVM__V1.69.24.0x0
# - iKVM__V1.69.25.0x0
# - iKVM__V1.69.39.0x0
#
# See also: ipmiview
#
test -z "$HOME" && echo 'missing $HOME' && exit 1
set -u
APP_CACHE_DIR="$HOME/.local/lib/ipmikvm"

IP=
USER=
PASS=
USERS='ADMIN '
PASSES='ADMIN '

# Use getopt(1) to reorder arguments
eval set --"$(getopt -- 'hu:P:' "$@")"

usage() {
    test ${1:-1} -ne 0 && exec >&2  # non-zero? write to stderr
    echo "Usage: $0 [-u ADMIN] [-P ADMIN] IP.ADD.RE.SS"
    echo
    echo "Usernames, passwords and machine aliases may be specified in"
    echo "~/.config/ipmikvm/dict - as ALIAS ADDRESS USER PASS - one per"
    echo "line. When ALIAS and ADDRESS are *, the USER and PASS will be"
    echo "tried consecutively for (otherwise) unmatched aliases/addresses."
    exit ${1:-1}
}

while getopts 'hu:P:' OPTION; do
    case "$OPTION" in
    h) usage 0;;
    u) USER=$OPTARG;;
    P) PASS=$OPTARG;;
    ?) usage 1;;
    esac
done
shift $((OPTIND - 1))

test $# -ne 1 && usage
IP=${1:-}; shift
test -z "$IP" && usage

# Try the aliases/password file.
DICT="$HOME/.config/ipmikvm/dict"
if test -s "$DICT"; then
    # Alias match
    LINES=$(awk "/^ *[^#]/{if(NF>=4&&(\$1==\"$IP\"||\$2==\"$IP\")){
        print \$0;exit}}" "$DICT")
    if test -n "$LINES"; then
        IP=$(echo "$LINES" | awk '{print $2}')
        test -z "$USER" && USER=$(echo "$LINES" | awk '{print $3}')
        test -z "$PASS" && PASS=$(echo "$LINES" | awk '{print $4}')
    elif test -z "$USER" && test -z "$PASS"; then
        # No user/pass supplied. Then get all the * * matches.
        USERS=$(awk '/^ *[^#]/{if(NF>=4&&$1=="*"&&$2=="*"){
            printf "%s ", $3}}' "$DICT")
        PASSES=$(awk '/^ *[^#]/{if(NF>=4&&$1=="*"&&$2=="*"){
            printf "%s ", $4}}' "$DICT")
    fi
fi
test -n "$USER" && USERS="$USER "; USER=
test -n "$PASS" && PASSES="$PASS "; PASS=

#echo "$USERS\$ // $PASSES\$"; exit 5


get_launch_jnlp() {
    management_ip="$1"
    users="$2"
    passes="$3"

    url="https://$management_ip"
    temp=$(mktemp)

    until test -z "$users"; do
        user=${users%% *}; users=${users#* }
        pass=${passes%% *}; passes=${passes#* }
        echo "attempting login on '$management_ip' with user $user" >&2

        data=$(curl --fail -LksS --cookie-jar "$temp" "$url")
        if test $? -ne 0 || ! echo "$data" | grep -q '<form '; then
            echo "unexpected login page on address '$management_ip': $data" >&2
            data=
            if test "${url#https:}" != "$url"; then
                url="http:${url#https:}"
                echo "retrying without ssl on $url" >&2
                data=$(curl --fail -LksS --cookie-jar "$temp" "$url")
                if test $? -ne 0 || ! echo "$data" | grep -q '<form '; then
                    echo "sad times" >&2
                    data=
                fi
            fi
            if test -z "$data"; then
                false
                break
            fi
        fi
        use_base64=$(echo "$data" | grep -q '=.*btoa' && echo 1)

        if test -n "$use_base64"; then
            user=$(echo -n "$user" | base64 -w0 | sed -e 's/=/%3D/g;s/+/%2B/g')
            pass=$(echo -n "$pass" | base64 -w0 | sed -e 's/=/%3D/g;s/+/%2B/g')
        fi
        data=$(test -n "$data" &&
          curl --fail -LksS --cookie "$temp" --cookie-jar "$temp" \
            -XPOST "$url/cgi/login.cgi" --data "name=$user&pwd=$pass&check=00")
        ret=$?
        fail_heur=0
        if test $ret -eq 0; then
            ok_heur=$(echo "$data" |
                grep -cF 'url_redirect.cgi?url_name=mainmenu')
            fail_heur=$(echo "$data" | grep -ciE \
                "url_redirect[.]cgi[?]url_name=login_alert|alert[(]|\
<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;URL=/\">")
            if test $ok_heur -gt 0 && test $fail_heur -gt 0; then
                echo "login page looks like success AND failure: $data" 2>&1
                rm "$temp"
                exit 1
            fi
            if test $fail_heur -gt 0; then
                ret=1
            fi
        fi
        test $ret -eq 0 && break
        echo "login failure ($fail_heur markers on page)" >&2
        data=
        false
    done

    if test -n "$data"; then
        for url_name in man_ikvm ikvm; do
            data=$(curl --fail -LksS --cookie "$temp" \
                -H "Referer: $url/cgi/url_redirect.cgi?url_name=man_ikvm" \
                "$url/cgi/url_redirect.cgi?url_name=$url_name&url_type=jwsk")
            test $? -ne 0 && echo "$data" | grep -q '^<jnlp spec=' && break
        done
        if ! echo "$data" | grep -q '^<jnlp spec='; then
            echo "unexpected jnlp page: $data" >&2
            data=
        fi
    fi
    rm "$temp"
    test -n "$data" && echo "$data"
}
# SYNOPSIS: get_launch_jnlp 10.x.x.x USERNAME PASSWORD

get_ikvm_jar() {
    launch_jnlp="$1"
    app_cache_dir="$2"

    jar=$(get_jar "$launch_jnlp")
    if test -z "$jar"; then
        echo "cannot find jar name in jnlp: $launch_jnlp" >&2
    fi
    jar_base=$(basename "$jar") # iKVM__V1.69.31.0x0.jar
    jar_base=${jar_base%.jar}   # iKVM__V1.69.31.0x0
    app_cache_dir="$app_cache_dir/$jar_base"
    test -d "$app_cache_dir" || mkdir -p "$app_cache_dir" || exit 1
    if ! test -f "$app_cache_dir/$jar"; then
        install_ikvm_application "$launch_jnlp" "$app_cache_dir" >&2 || exit 1
        test -f "$app_cache_dir/$jar" || exit 1
    fi
    echo "$app_cache_dir/$jar"
}
# SYNOPSIS: get_ikvm_jar JNLP_DATA APP_CACHE_DIR

get_jar() {
    echo "$1" | sed -e '
      /<jar /!d
      s#.* href="\([^"]*\).jar".*version="\([^"]*\)".*#\1__V\2.jar#
      s#.* href="\([^"]*\).jar".*#\1.jar#'
}
# SYNOPSIS: get_jar JNLP_DATA

get_arguments() {
    echo "$1" |
      sed -e '/<argument>/!d;s#.*<argument>\([^<]*\)</argument>.*#\1#' |
      sed -e 's/^$/./g'  # empty args would be skipped..
}
# SYNOPSIS: get_arguments JNLP_DATA  # returns LF-separated args

exec_ikvm() {
    jar="$1"; shift
    exec java -Djava.library.path="$(dirname "$jar")" \
      -cp "$jar" tw.com.aten.ikvm.KVMMain "$@"
}
# SYNOPSIS: exec_ikvm 10.x.x.x KVM_USERNAME KVM_PASSWORD

install_ikvm_application() {
    launch_jnlp="$1"
    destdir="$2"

    set -e
    codebase=$(
      echo "$launch_jnlp" | sed -e '/<jnlp /!d;s/.* codebase="//;s/".*//')
    jar=$(get_jar "$launch_jnlp")
    case "$(uname -s)" in
        Linux)
            nativelibs=$(
              echo "$launch_jnlp" | sed -e '
                /<nativelib.*linux.*x86_64/!d
                s#.* href="\([^"]*\).jar".*version="\([^"]*\)".*#\1__V\2.jar#
                s#.* href="\([^"]*\).jar".*#\1.jar#' | sort -u)
            ;;
        Darwin)
            nativelibs=$(
              echo "$launch_jnlp" | sed -e '
                /<nativelib.*libmac.*x86_64/!d
                s#.* href="\([^"]*\).jar".*version="\([^"]*\)".*#\1__V\2.jar#
                s#.* href="\([^"]*\).jar".*#\1.jar#' | sort -u)
            ;;
    esac
    set -x
    mkdir -p "$destdir"
    cd "$destdir"
    for x in $jar $nativelibs; do
        if curl -ko "$x.pack.gz" "$codebase$x.pack.gz"; then
            unpack200 "$x.pack.gz" "$x"
        elif curl -ko "$x" "$codebase$x"; then
            :
        else
            echo "$launch_jnlp"
            false
        fi
    done
    unzip -o lib*.jar
    rm -rf META-INF
    set +x
    set +e
}
# SYNOPSIS: install_ikvm_application JNLP_DATA DESTDIR


JNLP=$(get_launch_jnlp "$IP" "$USERS" "$PASSES")
test -z "$JNLP" && echo "Failed to get launch.jnlp" >&2 && exit 1

JAR=$(get_ikvm_jar "$JNLP" "$APP_CACHE_DIR")
test -z "$JAR" && echo "Failed to get iKVM*.jar" >&2 && exit 1

exec_ikvm "$JAR" $(get_arguments "$JNLP")
