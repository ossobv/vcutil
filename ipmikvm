#!/bin/sh
# ipmikvm (part of ossobv/vcutil) // wdoekes/2019-2021 // Public Domain
#
# A wrapper to call the SuperMicro iKVM console bypassing Java browser
# plugins.
#
# Requirements: java, unzip, curl (and: awk, base64, grep, sed)
#
# Usage:
#
#   $ ipmikvm
#   Usage: ipmikvm [-u ADMIN] [-P ADMIN] IP.ADD.RE.SS
#
#   $ ipmikvm 10.11.12.13 -P otherpassword
#   (connects KVM console on IPMI device at 10.11.12.13)
#
#   $ ipmikvm manually-downloaded.jnlp
#   (skips login, uses local jnlp file)
#
# Config file ~/.config/ipmikvm/dict:
#
#   * * ADMIN ADMIN
#   * * ADMIN OTHERPASS
#   alias 1.2.3.4 ADMIN ADMIN
#
# This has been tested with:
# - JViewer-1.46
# - iKVM__V1.69.19.0x0
# - ...
# - iKVM__V1.69.42.0x0
#
# See also: ipmiview
#
test -z "$HOME" && echo 'missing $HOME' && exit 1
set -u
APP_CACHE_DIR="$HOME/.local/lib/ipmikvm"

IP=
USER=
PASS=
PROXY=
USERS='ADMIN '
PASSES='ADMIN '
HTTPS_PORT=443
HTTP_PORT=80
VNC_PORT=5900
IPMI_PORT=623

# Use getopt(1) to reorder arguments
eval set --"$(getopt -- 'hu:P:p:' "$@")"

usage() {
    test ${1:-1} -ne 0 && exec >&2  # non-zero? write to stderr
    echo "Usage: $0 [-u ADMIN] [-P ADMIN] [-p mysshgateway] IP.ADD.RE.SS"
    echo
    echo "Usernames, passwords and machine aliases may be specified in"
    echo "~/.config/ipmikvm/dict - as ALIAS ADDRESS USER PASS - one per"
    echo "line. When ALIAS and ADDRESS are *, the USER and PASS will be"
    echo "tried consecutively for (otherwise) unmatched aliases/addresses."
    exit ${1:-1}
}

as_http() {
    echo "$1" | sed -e "s#^https://\([^:/]*\):($HTTPS_PORT|443)#http://\1:$HTTP_PORT#;s#^https:#http:#"
}

while getopts 'hu:P:p:' OPTION; do
    case "$OPTION" in
    h) usage 0;;
    u) USER=$OPTARG;;
    P) PASS=$OPTARG;;
    p) PROXY=$OPTARG;;
    ?) usage 1;;
    esac
done
shift $((OPTIND - 1))

test $# -ne 1 && usage
IP=${1:-}; shift
test -z "$IP" && usage

# Try the aliases/password file.
DICT="$HOME/.config/ipmikvm/dict"
if test -s "$DICT"; then
    # Alias match
    LINES=$(awk "/^ *[^#]/{if(NF>=4&&(\$1==\"$IP\"||\$2==\"$IP\")){
        print \$0;exit}}" "$DICT")
    if test -n "$LINES"; then
        IP=$(echo "$LINES" | awk '{print $2}')
        test -z "$USER" && USER=$(echo "$LINES" | awk '{print $3}')
        test -z "$PASS" && PASS=$(echo "$LINES" | awk '{print $4}')
    elif test -z "$USER" && test -z "$PASS"; then
        # No user/pass supplied. Then get all the * * matches.
        USERS=$(awk '/^ *[^#]/{if(NF>=4&&$1=="*"&&$2=="*"){
            printf "%s ", $3}}' "$DICT")
        PASSES=$(awk '/^ *[^#]/{if(NF>=4&&$1=="*"&&$2=="*"){
            printf "%s ", $4}}' "$DICT")
    fi
fi
test -n "$USER" && USERS="$USER "; USER=
test -n "$PASS" && PASSES="$PASS "; PASS=

#echo "$USERS\$ // $PASSES\$"; exit 5


get_launch_jnlp() {
    local management_ip="$1"
    local users="$2"
    local passes="$3"

    local url="https://$management_ip:$HTTPS_PORT"
    local local_append=''
    local temp=$(mktemp)

    until test -z "$users"; do
        local user=${users%% *}; users=${users#* }
        local pass=${passes%% *}; passes=${passes#* }
        echo "attempting login on '$management_ip:$HTTPS_PORT' with user $user" >&2

        local data="$(curl --fail -LksS --cookie-jar "$temp" "$url")"
        if test $? -ne 0 || ! echo "$data" | grep -q '<form '; then
            echo "unexpected login page on address '$management_ip': $data" >&2
            data=
            if test "${url#https:}" != "$url"; then
                url=$(as_http "$url")
                echo "retrying without ssl on $url" >&2
                local_append='<!-- DISABLED_SSL -->'
                data=$(curl --fail -LksS --cookie-jar "$temp" "$url")
                if test $? -ne 0 || ! echo "$data" | grep -q '<form '; then
                    echo "sad times" >&2
                    data=
                fi
            fi
            if test -z "$data"; then
                false
                break
            fi
        fi
        local use_base64=$(echo "$data" | grep -q '=.*btoa' && echo 1)

        if test -n "$use_base64"; then
            user=$(echo -n "$user" | base64 -w0 | sed -e 's/=/%3D/g;s/+/%2B/g')
            pass=$(echo -n "$pass" | base64 -w0 | sed -e 's/=/%3D/g;s/+/%2B/g')
        fi
        data=$(test -n "$data" &&
          curl --fail -LksS --cookie "$temp" --cookie-jar "$temp" \
            -XPOST "$url/cgi/login.cgi" --data "name=$user&pwd=$pass&check=00")
        local ret=$?
        local fail_heur=0
        if test $ret -eq 0; then
            local ok_heur=$(echo "$data" |
                grep -cF 'url_redirect.cgi?url_name=mainmenu')
            fail_heur=$(echo "$data" | grep -ciE \
                "url_redirect[.]cgi[?]url_name=login_alert|alert[(]|\
<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;URL=/\">")
            if test $ok_heur -gt 0 && test $fail_heur -gt 0; then
                echo "login page looks like success AND failure: $data" 2>&1
                rm "$temp"
                exit 1
            fi
            if test $fail_heur -gt 0; then
                ret=1
            fi
        fi
        test $ret -eq 0 && break
        echo "login failure ($fail_heur markers on page)" >&2
        data=
        false
    done

    if test -n "$data"; then
        for url_name in man_ikvm ikvm; do
            data=$(curl --fail -LksS --cookie "$temp" \
                -H "Referer: $url/cgi/url_redirect.cgi?url_name=man_ikvm" \
                "$url/cgi/url_redirect.cgi?url_name=$url_name&url_type=jwsk")
            test $? -ne 0 && echo "$data" | grep -q '^<jnlp spec=' && break
        done
        if ! echo "$data" | grep -q '^<jnlp spec='; then
            echo "unexpected jnlp page: $data" >&2
            data=
        fi
    fi
    rm "$temp"
    test -n "$data" && echo "$data$local_append"
}
# SYNOPSIS: get_launch_jnlp 10.x.x.x USERNAME PASSWORD

get_app_jar() {
    local launch_jnlp="$1"
    local app_cache_dir="$2"

    local app_jar="$(get_jars "$launch_jnlp" | head -n1)"  # first jar
    if test -z "$app_jar"; then
        echo "cannot find application jar name in jnlp: $launch_jnlp" >&2
        exit 1
    fi
    local jar_base="$(basename "$app_jar")" # iKVM__V1.69.31.0x0.jar
    local jar_base="${jar_base%.jar}"   # iKVM__V1.69.31.0x0
    local app_cache_dir="$app_cache_dir/$jar_base"
    umask 0077  # storing latest.jnlp here; might contain temp passwords
    test -d "$app_cache_dir" || mkdir -p "$app_cache_dir" || exit 1
    echo "$launch_jnlp" >"$app_cache_dir/latest.jnlp"
    if ! test -f "$app_cache_dir/$app_jar"; then
        install_ikvm_application "$launch_jnlp" "$app_cache_dir" >&2 || exit 1
        test -f "$app_cache_dir/$app_jar" || exit 1
    fi
    echo "$app_cache_dir/$app_jar"
}
# SYNOPSIS: get_app_jar JNLP_DATA APP_CACHE_DIR

get_app_class() {
    echo "$1" | sed -ne 's/.*<application-desc .*main-class="\([^"]*\)".*/\1/p'
}
# SYNOPSIS: get_app_class JNLP_DATA

get_jars() {
    echo "$1" | sed -e '
      /<jar /!d
      s#.* href="\([^"]*\).jar".*version="\([^"]*\)".*#\1__V\2.jar#
      s#.* href="\([^"]*\).jar".*#\1.jar#'
}
# SYNOPSIS: get_jars JNLP_DATA

get_arguments() {
    local certarg="$(echo "$1" | tr '\n' '|' | sed -e '
      /-----BEGIN CERTIFICATE/!d
      s/.*<argument>\(-----BEGIN CERTIFICATE[^<]*\)<.*/\1/
      '"s/['\"$]//g"';s/|/${LF}/g')"
    echo "$1" |
      sed -e '/<argument>/!d;s#.*<argument>\([^<]*\)</argument>.*#\1#' |
      sed -e "s/['\"$]//g;s/.*/'&'/" |
      sed -e "s!^'[[:blank:]]*<argument>-----BEGIN.*!\"$certarg\"!g" |
      sed -e "s/'5900'/'$VNC_PORT'/" |
      sed -e "s/'623'/'$IPMI_PORT'/"
}
# SYNOPSIS: get_arguments JNLP_DATA  # dumps quotes args to stdout
# DESCRIPTION: fetches every <argument>...</argument> from the data
#   and echoes them surrounded by quotes, so <argument>1</argument>
#   becomes '1'. For the optional certificate multiline argument, an
#   ${LF} variable is added, so we get a linefeed in the eval.
# USAGE: LF=$'\n'; eval set -- $(get_arguments "$JNLP_DATA")

exec_app() {
    local jar="$1"; shift
    local class="$1"; shift
    if test -z "$class"; then
	class=$(unzip -c "$jar" META-INF/MANIFEST.MF |
	    awk '/^Main-Class[[:blank:]]*:/{print $2}' |
	    sed -e 's/[[:cntrl:][:space:]]//g')
	echo "found Main-Class $class in $jar" >&2
    fi
    # iKVM
    #*/iKVM*.jar) class=tw.com.aten.ikvm.KVMMain;;
    # Redirection Viewer v1.46
    #*/JViewer.jar) class=com.ami.kvm.jviewer.JViewer;;
    if test -z "$class"; then
	echo "Unknown entrypoint in $jar" >&2
	exit 1
    fi
    set -x
    exec java -Djava.library.path="${jar%/*}" -cp "$jar" "$class" "$@"
}
# SYNOPSIS: exec_app JAR CLASS 10.x.x.x KVM_USERNAME KVM_PASSWORD

install_ikvm_application() {
    local launch_jnlp="$1"
    local destdir="$2"

    set -e
    local codebase=$(
      echo "$launch_jnlp" | sed -e '/<jnlp /!d;s/.* codebase="//;s/".*//' | sed -e "s%:443/%:$HTTPS_PORT/%")

    if echo "$launch_jnlp" | grep -q DISABLED_SSL; then
        codebase=$(as_http "$codebase")
    fi
    test "${codebase%/}" = "$codebase" || codebase="${codebase%/}"
    local jars="$(get_jars "$launch_jnlp")"
    case "$(uname -s)" in
        Linux) local libprefix=liblinux;;
        Darwin) local libprefix=libmac;;
        *) echo "Unknown platform: $(uname -s)" >&2; exit 1;;
    esac
    local nativelibs=$(
      echo "$launch_jnlp" | sed -e '
        /<nativelib.*'$libprefix'.*x86_64/!d
        s#.* href="\([^"]*\).jar".*version="\([^"]*\)".*#\1__V\2.jar#
        s#.* href="\([^"]*\).jar".*#\1.jar#' | sort -u)
    set -x
    mkdir -p "$destdir"
    cd "$destdir"
    for x in $jars $nativelibs; do
        test "${x%/*}" = "$x" || mkdir -p "${x%/*}"
        if curl -sS --fail -ko "$x" "$codebase/$x" &&
		file --brief --mime "$x" |
		grep -E '^application/(java-archive|zip)'; then
            :
        elif curl -sS --fail -ko "$x.pack.gz" "$codebase/$x.pack.gz" &&
		file --brief --mime "$x.pack.gz" |
		grep -E '^application/gzip' &&
		gunzip "$x.pack.gz" &&
		unpack200 "$x.pack" "$x"; then
	    :
        else
            echo "$launch_jnlp"
            false
        fi
    done
    test ! -f "$libprefix"*.jar || unzip -o $libprefix*.jar
    rm -rf META-INF
    set +x
    set +e
}
# SYNOPSIS: install_ikvm_application JNLP_DATA DESTDIR

find_available_port()
{
    local START="$1"
    local END="$2"
    local HOSTNAME="${3:-"localhost"}"
    for P in $(seq $START $END)
    do
        if ! nc -z "$HOSTNAME" "$P"
        then
            printf "%s" "$P"
            return
        fi
    done
    echo "Cannot find available local port beetween $START and $END"
    exit 1
}

cleanup_ssh()
{
    echo "I: Cleaning ssh tunnel"
    [ "$SSH_PID" ] || return 0
    kill -9 $SSH_PID
}

if [ -n "$PROXY" ]; then
    HTTPS_PORT="$(find_available_port 10443 20443)"
    HTTP_PORT="$(find_available_port 30080 40080)"
    VNC_PORT="$(find_available_port 5900 6000)"
    IPMI_PORT="$(find_available_port 6230 7000)"

    REMOTE_IP=$IP
    IP=127.0.0.1

    echo "I: Lauching ssh tunnel (-L$IPMI_PORT:$REMOTE_IP:623 -L$VNC_PORT:$REMOTE_IP:5900 -L$HTTPS_PORT:$REMOTE_IP:443 -L$HTTP_PORT:$REMOTE_IP:80 $PROXY)"
    trap "cleanup_ssh" EXIT TERM INT
    ssh -N -L$IPMI_PORT:$REMOTE_IP:623 -L$VNC_PORT:$REMOTE_IP:5900 -L$HTTPS_PORT:$REMOTE_IP:443 -L$HTTP_PORT:$REMOTE_IP:80 $PROXY &
    SSH_PID=$!

    TRIES=10
    while ! nc -z 127.0.0.1 $IPMI_PORT
    do
        echo "I: Waiting for ssh"
        sleep 1
        TRIES=$(( $TRIES - 1 ))
        if [ $TRIES -le 0 ]
        then
            echo "E: Failed."
            exit 1
        fi
    done
fi

if test "${IP%.jnlp}" != "$IP" -a -f "$IP"; then
    echo "(assuming $IP is the JNLP file)" >&2
    JNLP=$(cat "$IP")
else
    JNLP=$(get_launch_jnlp "$IP" "$USERS" "$PASSES")
    test -z "$JNLP" && echo "Failed to get launch.jnlp" >&2 && exit 1
fi

JAR=$(get_app_jar "$JNLP" "$APP_CACHE_DIR")
test -z "$JAR" && echo "Failed to get iKVM*.jar/JViewer*.jar" >&2 && exit 1
CLASS=$(get_app_class "$JNLP")  # might be blank

# Load quoted arguments (including multiline args)
LF='
'
eval set -- $(get_arguments "$JNLP")

exec_app "$JAR" "$CLASS" "$@"
